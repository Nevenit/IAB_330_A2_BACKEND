[
    {
        "id": "cc585ba53d34a911",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "182d3223c1260b67",
        "type": "tab",
        "label": "Camera Flow",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "5f48f9abaf283188",
        "type": "tab",
        "label": "RFID Flow",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "dd6e626e5df41466",
        "type": "tab",
        "label": "Machine Flow",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "0342a0cdf5d7ca65",
        "type": "sqlitedb",
        "db": "/data/database.db",
        "mode": "RWC"
    },
    {
        "id": "367ecc55a7054ddf",
        "type": "sqlitedb",
        "db": "/data/iotsolution.db",
        "mode": "RWC"
    },
    {
        "id": "ad650e799ceb7d26",
        "type": "inject",
        "z": "cc585ba53d34a911",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 540,
        "y": 280,
        "wires": [
            [
                "4f6b78c612172a4e"
            ]
        ]
    },
    {
        "id": "4f6b78c612172a4e",
        "type": "debug",
        "z": "cc585ba53d34a911",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 300,
        "wires": []
    },
    {
        "id": "3ec5d4248c952026",
        "type": "inject",
        "z": "182d3223c1260b67",
        "name": "Camera",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 950,
        "y": 220,
        "wires": [
            [
                "edb31d5514e790f3"
            ]
        ]
    },
    {
        "id": "edb31d5514e790f3",
        "type": "function",
        "z": "182d3223c1260b67",
        "name": "Get variables",
        "func": "msg.params = { $id: flow.get(\"cameraID\"), $num: flow.get(\"numDetected\") };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 220,
        "wires": [
            [
                "3c78757cb6a28c73",
                "bd7d578c3d6a6a9f"
            ]
        ]
    },
    {
        "id": "a6c119b8f42d1a11",
        "type": "inject",
        "z": "182d3223c1260b67",
        "name": "Camera ID 1",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "id",
                "v": "1",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 310,
        "y": 200,
        "wires": [
            [
                "a28f07491526830d"
            ]
        ]
    },
    {
        "id": "dfb56d560242aa28",
        "type": "inject",
        "z": "182d3223c1260b67",
        "name": "numDetected 1",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "numDetected",
                "v": "1",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 320,
        "y": 360,
        "wires": [
            [
                "d19061ee7b1ca918"
            ]
        ]
    },
    {
        "id": "a28f07491526830d",
        "type": "change",
        "z": "182d3223c1260b67",
        "name": "Set ID",
        "rules": [
            {
                "t": "set",
                "p": "cameraID",
                "pt": "flow",
                "to": "id",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 510,
        "y": 240,
        "wires": [
            [
                "93e25fb5ad625c9d"
            ]
        ]
    },
    {
        "id": "d19061ee7b1ca918",
        "type": "change",
        "z": "182d3223c1260b67",
        "name": "Set numDetected",
        "rules": [
            {
                "t": "set",
                "p": "numDetected",
                "pt": "flow",
                "to": "numDetected",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 570,
        "y": 400,
        "wires": [
            [
                "74c1261157f86986"
            ]
        ]
    },
    {
        "id": "b5b3f3d3ea1a9496",
        "type": "inject",
        "z": "182d3223c1260b67",
        "name": "Camera ID 2",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "id",
                "v": "2",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 310,
        "y": 240,
        "wires": [
            [
                "a28f07491526830d"
            ]
        ]
    },
    {
        "id": "0b5512ca363c36df",
        "type": "inject",
        "z": "182d3223c1260b67",
        "name": "Camera ID 3",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "id",
                "v": "3",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 310,
        "y": 280,
        "wires": [
            [
                "a28f07491526830d"
            ]
        ]
    },
    {
        "id": "93e25fb5ad625c9d",
        "type": "debug",
        "z": "182d3223c1260b67",
        "name": "ID Debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "id",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 680,
        "y": 240,
        "wires": []
    },
    {
        "id": "5bdaa9b5d33feb9e",
        "type": "inject",
        "z": "182d3223c1260b67",
        "name": "numDetected 2",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "numDetected",
                "v": "2",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 320,
        "y": 400,
        "wires": [
            [
                "d19061ee7b1ca918"
            ]
        ]
    },
    {
        "id": "50f328785802bfef",
        "type": "inject",
        "z": "182d3223c1260b67",
        "name": "numDetected 3",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "numDetected",
                "v": "3",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 320,
        "y": 440,
        "wires": [
            [
                "d19061ee7b1ca918"
            ]
        ]
    },
    {
        "id": "74c1261157f86986",
        "type": "debug",
        "z": "182d3223c1260b67",
        "name": "numDetected",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "numDetected",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 400,
        "wires": []
    },
    {
        "id": "bd7d578c3d6a6a9f",
        "type": "debug",
        "z": "182d3223c1260b67",
        "name": "variables",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "params",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1120,
        "y": 260,
        "wires": []
    },
    {
        "id": "3c78757cb6a28c73",
        "type": "sqlite",
        "z": "182d3223c1260b67",
        "mydb": "0342a0cdf5d7ca65",
        "sqlquery": "fixed",
        "sql": "UPDATE Cameras SET numDetected = 5 WHERE cameraID = 1;",
        "name": "Update camera numDetected",
        "x": 1410,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "85d4b76ecfd1556e",
        "type": "function",
        "z": "182d3223c1260b67",
        "name": "Generate array",
        "func": "function getRandomFloat(min, max, decimals) {\n    return (Math.random() * (max - min) + min).toFixed(decimals);\n}\n\n// The horizontal and vertical pixel count\nlet cameraResolution = 16;\n\nlet cameraArray = [];\n\n//Fill the array with random values within small range\n//to simulate noise. \nlet debug = \"This is just a visualisation of the random noise, not the actual values. \\n\";\nfor (let y = 0; y < cameraResolution; y++) {\n    let row = [];\n    for (let x = 0; x < cameraResolution; x++) {\n        let value = getRandomFloat(21.0, 22.0, 1);\n        row.push(value);\n        if (value > 21.5) {\n            debug += \" o\";\n        } else {\n            debug += \" x\";\n        }\n    }\n    cameraArray.push(row);\n    debug += \"\\n\";\n}\n\nmsg.debug = debug;\nmsg.array = cameraArray;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 640,
        "wires": [
            [
                "875661142d78f4a2",
                "e0294ca2fc4e2bcb",
                "9f0c8d9538a3376b"
            ]
        ]
    },
    {
        "id": "875661142d78f4a2",
        "type": "debug",
        "z": "182d3223c1260b67",
        "name": "Debug array",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "array",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 510,
        "y": 680,
        "wires": []
    },
    {
        "id": "f1395d322b3f0466",
        "type": "inject",
        "z": "182d3223c1260b67",
        "name": "Take picture",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 310,
        "y": 640,
        "wires": [
            [
                "85d4b76ecfd1556e"
            ]
        ]
    },
    {
        "id": "e0294ca2fc4e2bcb",
        "type": "debug",
        "z": "182d3223c1260b67",
        "name": "Debug array string",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "arrayString",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 720,
        "wires": []
    },
    {
        "id": "9f0c8d9538a3376b",
        "type": "function",
        "z": "182d3223c1260b67",
        "name": "Add heat sources",
        "func": "function getRandom(min, max) {\n    return Math.floor(Math.random() * (max - min)) + min;\n}\n\nfunction areOverlapping(pos1, pos2, size) {\n    return (Math.abs(pos1[0] - pos2[0]) < size * 2 || Math.abs(pos1[1] - pos2[1]) < size * 2)\n}\n\nfunction isPositionOverlappingExisting(pos, existing, size) {\n    for (let i = 0; i < existing.length; i++) {\n        if (areOverlapping(pos, existing[i], size)) {\n            return true\n        }\n    }\n    return false\n}\n\nfunction placeHeatSource(cameraArray, pos, size, temp) {\n    for (let _y = pos[1] - size; _y <= pos[1] + size; _y++) {\n        for (let _x = pos[0] - size; _x <= pos[0] + size; _x++) {\n            cameraArray[_x][_y] = temp - (Math.abs(pos[0] - _x) + Math.abs(pos[1] - _y));\n        }\n    }\n    return cameraArray;\n}\n\n//This is a very lazy way of placing something in a unique position\n//its slow and inefficient, but its fast enough and works well for\n//this simulation\nfunction getUniquePosition(cameraArray, existing, size) {\n    //Try to fins a unique position 1000 times\n    //anything more than that would just take too long\n    for (let i = 0; i < 1000; i++) {\n        let x = getRandom(size, cameraArray.length - size);\n        let y = getRandom(size, cameraArray.length - size);\n        if (existing.length == 0) {\n            return [x, y]\n        }\n        else {\n            if (!isPositionOverlappingExisting([x, y], existing, size)) {\n                return [x, y]\n            }\n        }\n    }\n    node.warn(\"This didnt work, you cant fit that many heat sources in\")\n    return -1\n}\n\nlet cameraArray = msg.array;\n\n//The number of heat sources to add\nlet heatSourceCount = 4;\n\n//The temperature of the heatsources\nlet heatSourceTemperature = 36.6;\n\n//The size of the heat source in pixels to all sides \n// size 0 would make a 1x1 heatsource, 1 3x3, 2 5x5 and so on\nlet heatSourceSize = 1;\n\n\n//Stores the position of heatsources\nlet existingHeatSources = [];\n\n\nfor (let i = 0; i < heatSourceCount; i++) {\n    let pos = getUniquePosition(cameraArray, existingHeatSources, heatSourceSize);\n    cameraArray = placeHeatSource(cameraArray, pos, heatSourceSize, heatSourceTemperature);\n    existingHeatSources.push(pos);\n}\n\nlet arrayString = \"\"\n\nfor (let y = 0; y < cameraArray.length; y++) {\n    for (let x = 0; x < cameraArray.length; x++) {\n        arrayString += cameraArray[y][x] + \",\";\n    }\n    arrayString += \"\\n\";\n}\n\nmsg.payload = arrayString;\nmsg.arrayString = arrayString;\nmsg.array = cameraArray;\nmsg.sources = existingHeatSources;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 640,
        "wires": [
            [
                "1d0ffc65c97a15c3",
                "bf061b52669fb35a",
                "9d4d0c054e96a8a3",
                "6e43bb6b516be8ed"
            ]
        ]
    },
    {
        "id": "1d0ffc65c97a15c3",
        "type": "debug",
        "z": "182d3223c1260b67",
        "name": "Debug positions",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "sources",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 680,
        "wires": []
    },
    {
        "id": "bf061b52669fb35a",
        "type": "debug",
        "z": "182d3223c1260b67",
        "name": "Debug array",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "array",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 720,
        "wires": []
    },
    {
        "id": "9d4d0c054e96a8a3",
        "type": "debug",
        "z": "182d3223c1260b67",
        "name": "Debug array string",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "arrayString",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 760,
        "wires": []
    },
    {
        "id": "6e43bb6b516be8ed",
        "type": "file",
        "z": "182d3223c1260b67",
        "name": "",
        "filename": "/data/output.txt",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1100,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "c46fe0b85add5126",
        "type": "catch",
        "z": "182d3223c1260b67",
        "name": "Catch all errors",
        "scope": null,
        "uncaught": false,
        "x": 300,
        "y": 880,
        "wires": [
            [
                "aa8c4feded2cb1a1"
            ]
        ]
    },
    {
        "id": "aa8c4feded2cb1a1",
        "type": "debug",
        "z": "182d3223c1260b67",
        "name": "All errors",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 460,
        "y": 880,
        "wires": []
    },
    {
        "id": "3690872c15f9a63c",
        "type": "sqlite",
        "z": "5f48f9abaf283188",
        "mydb": "367ecc55a7054ddf",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "iot DB",
        "x": 1270,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "031274933e5da9a4",
        "type": "function",
        "z": "5f48f9abaf283188",
        "name": "Create Update Query",
        "func": "if (msg.topic === \"\")\n{\n    msg.topic = 0;\n}\nvar statement = \"UPDATE RFIDList SET roomID = \" + msg.topic + \" WHERE RFID = \\\"\" + msg.payload + \"\\\"\";\nvar newmsg = {topic: statement};\nreturn newmsg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 180,
        "wires": [
            [
                "be0bb92a267f9327",
                "3690872c15f9a63c"
            ]
        ]
    },
    {
        "id": "be0bb92a267f9327",
        "type": "debug",
        "z": "5f48f9abaf283188",
        "name": "debug 2",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 260,
        "wires": []
    },
    {
        "id": "c8314966f143b3f7",
        "type": "inject",
        "z": "5f48f9abaf283188",
        "name": "RFID Scanner",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "v": "roomnum",
                "vt": "flow"
            },
            {
                "p": "timestamp",
                "v": "",
                "vt": "date"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "rfid",
        "payloadType": "flow",
        "x": 510,
        "y": 180,
        "wires": [
            [
                "031274933e5da9a4"
            ]
        ]
    },
    {
        "id": "ef0baea360079b49",
        "type": "inject",
        "z": "5f48f9abaf283188",
        "name": "Room 1",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "str",
        "x": 490,
        "y": 260,
        "wires": [
            [
                "11a69c770e94b775"
            ]
        ]
    },
    {
        "id": "bc211187d06ccc72",
        "type": "inject",
        "z": "5f48f9abaf283188",
        "name": "Room 2",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "2",
        "payloadType": "str",
        "x": 490,
        "y": 320,
        "wires": [
            [
                "11a69c770e94b775"
            ]
        ]
    },
    {
        "id": "84190ae1ca48da69",
        "type": "inject",
        "z": "5f48f9abaf283188",
        "name": "Room 3",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "3",
        "payloadType": "str",
        "x": 490,
        "y": 380,
        "wires": [
            [
                "11a69c770e94b775"
            ]
        ]
    },
    {
        "id": "0b35accc602aa3fe",
        "type": "inject",
        "z": "5f48f9abaf283188",
        "name": "c65e3be8-849c-46f0-9906-d7df37a4d9fc",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "c65e3be8-849c-46f0-9906-d7df37a4d9fc",
        "payloadType": "str",
        "x": 600,
        "y": 580,
        "wires": [
            [
                "e650f823e6fd72c9"
            ]
        ]
    },
    {
        "id": "e859083f0e35025e",
        "type": "inject",
        "z": "5f48f9abaf283188",
        "name": "51b304c6-ceb2-404b-b576-5bec8cc4008a",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "51b304c6-ceb2-404b-b576-5bec8cc4008a",
        "payloadType": "str",
        "x": 600,
        "y": 640,
        "wires": [
            [
                "e650f823e6fd72c9"
            ]
        ]
    },
    {
        "id": "5fb939e2063f6a7b",
        "type": "inject",
        "z": "5f48f9abaf283188",
        "name": "4d6a4996-0373-4539-b05c-7c93a056a6a5",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "4d6a4996-0373-4539-b05c-7c93a056a6a5",
        "payloadType": "str",
        "x": 600,
        "y": 700,
        "wires": [
            [
                "e650f823e6fd72c9"
            ]
        ]
    },
    {
        "id": "e650f823e6fd72c9",
        "type": "change",
        "z": "5f48f9abaf283188",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "rfid",
                "pt": "flow",
                "to": "payload",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 890,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "f542c63fb91ea041",
        "type": "inject",
        "z": "5f48f9abaf283188",
        "name": "No Room",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 480,
        "y": 440,
        "wires": [
            [
                "11a69c770e94b775"
            ]
        ]
    },
    {
        "id": "f7739223468e4b8c",
        "type": "function",
        "z": "5f48f9abaf283188",
        "name": "Insert RFID History Data",
        "func": "if (msg.topic === \"\") \n{\n    var prevroomnum = flow.get(\"prevroomnum\");\n    var statement = \"INSERT INTO RFIDHistory(RFID, Timestamp, RoomID, EventType) VALUES (\\\"\" + msg.payload + \"\\\", \\\"\" + msg.timestampformat + \"\\\", \" + prevroomnum + \", 0)\";\n}\nelse\n{\n    var statement = \"INSERT INTO RFIDHistory(RFID, Timestamp, RoomID, EventType) VALUES (\\\"\" + msg.payload + \"\\\", \\\"\" + msg.timestampformat + \"\\\", \" + msg.topic + \", 1)\";\n}\nvar newmsg = { topic: statement };\nreturn newmsg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 120,
        "wires": [
            [
                "833114b0ec3a4394",
                "3690872c15f9a63c"
            ]
        ]
    },
    {
        "id": "833114b0ec3a4394",
        "type": "debug",
        "z": "5f48f9abaf283188",
        "name": "debug 10",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "topic",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1240,
        "y": 60,
        "wires": []
    },
    {
        "id": "11a69c770e94b775",
        "type": "function",
        "z": "5f48f9abaf283188",
        "name": "set flow.roomnum",
        "func": "if (msg.payload === \"\")\n{\n    flow.set(\"prevroomnum\", flow.get(\"roomnum\"));\n}\nflow.set(\"roomnum\", msg.payload);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "c728a0d3be08107c",
        "type": "moment",
        "z": "5f48f9abaf283188",
        "name": "",
        "topic": "",
        "input": "timestamp",
        "inputType": "msg",
        "inTz": "Australia/Brisbane",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "",
        "locale": "en-US",
        "output": "timestampformat",
        "outputType": "msg",
        "outTz": "Australia/Brisbane",
        "x": 780,
        "y": 120,
        "wires": [
            [
                "f7739223468e4b8c"
            ]
        ]
    },
    {
        "id": "e10ba1e868967fb1",
        "type": "sqlite",
        "z": "dd6e626e5df41466",
        "mydb": "367ecc55a7054ddf",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "iot DB",
        "x": 1230,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "8da816452cc64d71",
        "type": "function",
        "z": "dd6e626e5df41466",
        "name": "Create Update Query",
        "func": "if (msg.topic === \"\")\n{\n    msg.topic = 0;\n}\nvar statement = \"UPDATE Machines SET Status = \" + msg.payload + \" WHERE MachineID = \\\"\" + msg.topic + \"\\\"\";\nvar newmsg = {topic: statement};\nreturn newmsg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 220,
        "wires": [
            [
                "45844fc35a75e213",
                "e10ba1e868967fb1"
            ]
        ]
    },
    {
        "id": "45844fc35a75e213",
        "type": "debug",
        "z": "dd6e626e5df41466",
        "name": "debug 7",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 320,
        "wires": []
    },
    {
        "id": "62cacab11064ba77",
        "type": "inject",
        "z": "dd6e626e5df41466",
        "name": "Energy Monitor",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "v": "machineid",
                "vt": "flow"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "machineenergy",
        "payloadType": "flow",
        "x": 340,
        "y": 220,
        "wires": [
            [
                "9508624bb65ef1fb",
                "2810d21bd05d7139"
            ]
        ]
    },
    {
        "id": "cc647040fa647669",
        "type": "inject",
        "z": "dd6e626e5df41466",
        "name": "0 Watts",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 310,
        "y": 300,
        "wires": [
            [
                "f79670897e835242"
            ]
        ]
    },
    {
        "id": "49f5377c869cf05e",
        "type": "inject",
        "z": "dd6e626e5df41466",
        "name": "100 Watts",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "100",
        "payloadType": "num",
        "x": 300,
        "y": 360,
        "wires": [
            [
                "f79670897e835242"
            ]
        ]
    },
    {
        "id": "18294fb6d6194c27",
        "type": "inject",
        "z": "dd6e626e5df41466",
        "name": "200 Watts",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "200",
        "payloadType": "num",
        "x": 300,
        "y": 420,
        "wires": [
            [
                "f79670897e835242"
            ]
        ]
    },
    {
        "id": "f79670897e835242",
        "type": "change",
        "z": "dd6e626e5df41466",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "machineenergy",
                "pt": "flow",
                "to": "payload",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 530,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "195f79d5d1c506d3",
        "type": "inject",
        "z": "dd6e626e5df41466",
        "name": "Machine 1",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "str",
        "x": 320,
        "y": 620,
        "wires": [
            [
                "2dea339db1c46c28"
            ]
        ]
    },
    {
        "id": "3e09fa03bdb607be",
        "type": "inject",
        "z": "dd6e626e5df41466",
        "name": "Machine 2",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "2",
        "payloadType": "str",
        "x": 320,
        "y": 680,
        "wires": [
            [
                "2dea339db1c46c28"
            ]
        ]
    },
    {
        "id": "205f5959a190718c",
        "type": "inject",
        "z": "dd6e626e5df41466",
        "name": "Machine 3",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "3",
        "payloadType": "str",
        "x": 320,
        "y": 740,
        "wires": [
            [
                "2dea339db1c46c28"
            ]
        ]
    },
    {
        "id": "2dea339db1c46c28",
        "type": "change",
        "z": "dd6e626e5df41466",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "machineid",
                "pt": "flow",
                "to": "payload",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 730,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "94d5c1936443d8da",
        "type": "inject",
        "z": "dd6e626e5df41466",
        "name": "300 Watts",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "300",
        "payloadType": "num",
        "x": 300,
        "y": 480,
        "wires": [
            [
                "f79670897e835242"
            ]
        ]
    },
    {
        "id": "9508624bb65ef1fb",
        "type": "debug",
        "z": "dd6e626e5df41466",
        "name": "debug 8",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 540,
        "y": 140,
        "wires": []
    },
    {
        "id": "2810d21bd05d7139",
        "type": "function",
        "z": "dd6e626e5df41466",
        "name": "Parse Energy Rating",
        "func": "var energy = msg.payload;\nvar status = 0;\nif (energy >= 150)\n{\n    status = 1\n}\nvar newmsg = { topic: msg.topic, payload: status };\nreturn newmsg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 220,
        "wires": [
            [
                "968e95bbf2d1245d",
                "8da816452cc64d71"
            ]
        ]
    },
    {
        "id": "968e95bbf2d1245d",
        "type": "debug",
        "z": "dd6e626e5df41466",
        "name": "debug 9",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 140,
        "wires": []
    }
]