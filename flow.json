[
    {
        "id": "cc585ba53d34a911",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "182d3223c1260b67",
        "type": "tab",
        "label": "Camera Flow",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "4515619534d06bc2",
        "type": "tab",
        "label": "RFID Flow",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "88cb21596959a18c",
        "type": "tab",
        "label": "Machine Flow",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "0342a0cdf5d7ca65",
        "type": "sqlitedb",
        "db": "/data/database.db",
        "mode": "RWC"
    },
    {
        "id": "367ecc55a7054ddf",
        "type": "sqlitedb",
        "db": "/data/iotsolution.db",
        "mode": "RWC"
    },
    {
        "id": "ad650e799ceb7d26",
        "type": "inject",
        "z": "cc585ba53d34a911",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 540,
        "y": 280,
        "wires": [
            [
                "4f6b78c612172a4e"
            ]
        ]
    },
    {
        "id": "4f6b78c612172a4e",
        "type": "debug",
        "z": "cc585ba53d34a911",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 300,
        "wires": []
    },
    {
        "id": "a6c119b8f42d1a11",
        "type": "inject",
        "z": "182d3223c1260b67",
        "name": "Camera ID 1",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "id",
                "v": "1",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 310,
        "y": 200,
        "wires": [
            [
                "a28f07491526830d"
            ]
        ]
    },
    {
        "id": "dfb56d560242aa28",
        "type": "inject",
        "z": "182d3223c1260b67",
        "name": "numDetected 1",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "numDetected",
                "v": "1",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 320,
        "y": 360,
        "wires": [
            [
                "d19061ee7b1ca918"
            ]
        ]
    },
    {
        "id": "a28f07491526830d",
        "type": "change",
        "z": "182d3223c1260b67",
        "name": "Set ID",
        "rules": [
            {
                "t": "set",
                "p": "cameraID",
                "pt": "flow",
                "to": "id",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 510,
        "y": 240,
        "wires": [
            [
                "93e25fb5ad625c9d"
            ]
        ]
    },
    {
        "id": "d19061ee7b1ca918",
        "type": "change",
        "z": "182d3223c1260b67",
        "name": "Set numDetected",
        "rules": [
            {
                "t": "set",
                "p": "numDetected",
                "pt": "flow",
                "to": "numDetected",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 570,
        "y": 400,
        "wires": [
            [
                "74c1261157f86986"
            ]
        ]
    },
    {
        "id": "b5b3f3d3ea1a9496",
        "type": "inject",
        "z": "182d3223c1260b67",
        "name": "Camera ID 2",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "id",
                "v": "2",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 310,
        "y": 240,
        "wires": [
            [
                "a28f07491526830d"
            ]
        ]
    },
    {
        "id": "0b5512ca363c36df",
        "type": "inject",
        "z": "182d3223c1260b67",
        "name": "Camera ID 3",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "id",
                "v": "3",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 310,
        "y": 280,
        "wires": [
            [
                "a28f07491526830d"
            ]
        ]
    },
    {
        "id": "93e25fb5ad625c9d",
        "type": "debug",
        "z": "182d3223c1260b67",
        "name": "ID Debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "id",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 680,
        "y": 240,
        "wires": []
    },
    {
        "id": "5bdaa9b5d33feb9e",
        "type": "inject",
        "z": "182d3223c1260b67",
        "name": "numDetected 2",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "numDetected",
                "v": "2",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 320,
        "y": 400,
        "wires": [
            [
                "d19061ee7b1ca918"
            ]
        ]
    },
    {
        "id": "50f328785802bfef",
        "type": "inject",
        "z": "182d3223c1260b67",
        "name": "numDetected 3",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "numDetected",
                "v": "3",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 320,
        "y": 440,
        "wires": [
            [
                "d19061ee7b1ca918"
            ]
        ]
    },
    {
        "id": "74c1261157f86986",
        "type": "debug",
        "z": "182d3223c1260b67",
        "name": "numDetected",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "numDetected",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 400,
        "wires": []
    },
    {
        "id": "85d4b76ecfd1556e",
        "type": "function",
        "z": "182d3223c1260b67",
        "name": "Generate array",
        "func": "function getRandomFloat(min, max, decimals) {\n    return (Math.random() * (max - min) + min).toFixed(decimals);\n}\n\n// The horizontal and vertical pixel count\nlet cameraResolution = 32;\n\nlet cameraArray = [];\n\n//Fill the array with random values within small range\n//to simulate noise. \nlet debug = \"This is just a visualisation of the random noise, not the actual values. \\n\";\nfor (let y = 0; y < cameraResolution; y++) {\n    let row = [];\n    for (let x = 0; x < cameraResolution; x++) {\n        let value = parseFloat(getRandomFloat(21.0, 22.0, 1));\n        row.push(value);\n        if (value > 21.5) {\n            debug += \" o\";\n        } else {\n            debug += \" x\";\n        }\n    }\n    cameraArray.push(row);\n    debug += \"\\n\";\n}\n\nmsg.debug = debug;\nmsg.array = cameraArray;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 640,
        "wires": [
            [
                "875661142d78f4a2",
                "e0294ca2fc4e2bcb",
                "9f0c8d9538a3376b"
            ]
        ]
    },
    {
        "id": "875661142d78f4a2",
        "type": "debug",
        "z": "182d3223c1260b67",
        "name": "Debug array",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "array",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 510,
        "y": 680,
        "wires": []
    },
    {
        "id": "f1395d322b3f0466",
        "type": "inject",
        "z": "182d3223c1260b67",
        "name": "Take picture",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 310,
        "y": 640,
        "wires": [
            [
                "85d4b76ecfd1556e"
            ]
        ]
    },
    {
        "id": "e0294ca2fc4e2bcb",
        "type": "debug",
        "z": "182d3223c1260b67",
        "name": "Debug array string",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "arrayString",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 720,
        "wires": []
    },
    {
        "id": "9f0c8d9538a3376b",
        "type": "function",
        "z": "182d3223c1260b67",
        "name": "Add heat sources",
        "func": "function getRandom(min, max) {\n    return Math.floor(Math.random() * (max - min)) + min;\n}\n\n// Add a heatsource to the array\nfunction placeHeatSource(cameraArray, pos, size, temp) {\n    for (let _y = pos[1] - size; _y <= pos[1] + size; _y++) {\n        for (let _x = pos[0] - size; _x <= pos[0] + size; _x++) {\n            if (_x < 0 || _x >= cameraArray.length) {continue;}\n            if (_y < 0 || _y >= cameraArray.length) {continue;}\n            cameraArray[_x][_y] = temp - (Math.abs(pos[0] - _x) + Math.abs(pos[1] - _y));\n        }\n    }\n    return cameraArray;\n}\n\n// Get a random position a heatsource could be placed without touching other heatsources\nfunction getAvaliablePosition(cameraArray, existing, size) {\n    let avaliablePositons = [];\n    for (let y = 0; y < cameraArray.length; y++) {\n        for (let x = 0; x < cameraArray.length; x++) {\n            if (existing.length == 0) { return [getRandom(0, cameraArray.length), getRandom(0, cameraArray.length)]}\n            let doAdd = true;\n            for (let e = 0; e < existing.length; e++) {\n                if (Math.abs(x - existing[e][0]) <= (size * 2 + 1)) {\n                    doAdd = false;\n                    break;\n                }\n                if (Math.abs(y - existing[e][1]) <= (size * 2 + 1)) {\n                    doAdd = false;\n                    break;\n                }\n            }\n            if (doAdd) {\n                avaliablePositons.push([x, y]);\n            }\n            \n        }\n    }\n    return avaliablePositons[getRandom(0, avaliablePositons.length)];\n}\n\nlet cameraArray = msg.array;\n\n//The number of heat sources to add\nlet heatSourceCount = flow.get(\"numDetected\");\n\n//The temperature of the heatsources\nlet heatSourceTemperature = 36.6;\n\n//The size of the heat source in pixels to all sides \n// size 0 would make a 1x1 heatsource, 1 3x3, 2 5x5 and so on\nlet heatSourceSize = 1;\n\n\n//Stores the position of heatsources\nlet existingHeatSources = [];\n\n\nfor (let i = 0; i < heatSourceCount; i++) {\n    let pos = getAvaliablePosition(cameraArray, existingHeatSources, heatSourceSize);\n    cameraArray = placeHeatSource(cameraArray, pos, heatSourceSize, heatSourceTemperature);\n    existingHeatSources.push(pos);\n}\n//node.warn(existingHeatSources);\nlet arraySimpleString = \"\"\n\nfor (let y = 0; y < cameraArray.length; y++) {\n    for (let x = 0; x < cameraArray.length; x++) {\n        if (cameraArray[y][x] > 32) {\n            arraySimpleString += \"1,\";\n        } else {\n            arraySimpleString += \"0,\";\n        }\n        \n    }\n    //arraySimpleString += \"\\n\";\n}\n\n\nlet arrayTrueString = \"\"\n\nfor (let y = 0; y < cameraArray.length; y++) {\n    for (let x = 0; x < cameraArray.length; x++) {\n        arrayTrueString += cameraArray[y][x] + \",\";\n    }\n    //arrayTrueString += \"\\n\";\n}\n\n//msg.payload = cameraArray;\nmsg.arraySimpleString = arraySimpleString;\nmsg.arrayTrueString = arrayTrueString;\nmsg.array = cameraArray;\nmsg.sources = existingHeatSources;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 640,
        "wires": [
            [
                "1d0ffc65c97a15c3",
                "bf061b52669fb35a",
                "9d4d0c054e96a8a3",
                "6e43bb6b516be8ed",
                "075ebfcf23998e77",
                "ad18168e8834586c"
            ]
        ]
    },
    {
        "id": "1d0ffc65c97a15c3",
        "type": "debug",
        "z": "182d3223c1260b67",
        "name": "Debug positions",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "sources",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 680,
        "wires": []
    },
    {
        "id": "bf061b52669fb35a",
        "type": "debug",
        "z": "182d3223c1260b67",
        "name": "Debug array",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "array",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 720,
        "wires": []
    },
    {
        "id": "9d4d0c054e96a8a3",
        "type": "debug",
        "z": "182d3223c1260b67",
        "name": "Debug array string",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "arraySimpleString",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 760,
        "wires": []
    },
    {
        "id": "6e43bb6b516be8ed",
        "type": "file",
        "z": "182d3223c1260b67",
        "d": true,
        "name": "",
        "filename": "/data/output.txt",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 980,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "f92ff7af120ef533",
        "type": "comment",
        "z": "182d3223c1260b67",
        "name": "Simulate camera sensor",
        "info": "",
        "x": 550,
        "y": 600,
        "wires": []
    },
    {
        "id": "ec795ae9b54afe1c",
        "type": "comment",
        "z": "182d3223c1260b67",
        "name": "Node-red recieves data from sensor",
        "info": "",
        "x": 1060,
        "y": 600,
        "wires": []
    },
    {
        "id": "eae1d6f576cd6e8c",
        "type": "debug",
        "z": "182d3223c1260b67",
        "name": "People detected",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "peopleDetected",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1250,
        "y": 720,
        "wires": []
    },
    {
        "id": "075ebfcf23998e77",
        "type": "function",
        "z": "182d3223c1260b67",
        "name": "Count heat sources",
        "func": "var cameraArray = msg.array;\nvar cameraArrayMarked = [];\nvar cameraResolution = cameraArray.length;\n\nfunction getNeighbours(pos) {\n    let neighbourArray = [];\n    for (let y = pos[1] - 1; y <= pos[1] + 1; y++) {\n        for (let x = pos[0] - 1; x <= pos[0] + 1; x++) {\n            if (x < 0 || x >= cameraResolution) {continue;}\n            if (y < 0 || y >= cameraResolution) {continue;}\n            if (x == pos[0] && y == pos[1]) {continue;}\n            if (cameraArrayMarked[y][x] == 1) { continue; }\n            \n            neighbourArray.push([x, y]);\n        }\n    }\n    return neighbourArray;\n}\n\nfunction visitElement(pos) {\n    let marked = 0;\n    let isWithinRange = ((cameraArray[pos[1]][pos[0]] > 34) && (cameraArray[pos[1]][pos[0]] < 40));\n    let isMarked = cameraArrayMarked[pos[1]][pos[0]] == 1;\n\n    if (isWithinRange && !isMarked) {\n        cameraArrayMarked[pos[1]][pos[0]] = 1;\n        marked = 1;\n        let neighbourArray = getNeighbours(pos);\n        for (let i = 0; i < neighbourArray.length; i++) {\n            marked += visitElement(neighbourArray[i]);\n        }\n\n    }\n    return marked;\n}\n\n// Empty the visited array \nfor (let y = 0; y < cameraResolution; y++) {\n    let row = []\n    for (let x = 0; x < cameraResolution; x++) {\n        row.push(0);\n    }\n    cameraArrayMarked.push(row);\n}\n\n// Detect blobs\nlet peopleDetected = 0;\nfor (let y = 0; y < cameraResolution; y++) {\n    for (let x = 0; x < cameraResolution; x++) {\n        let result = visitElement([x, y]);\n        if (result > 0) {\n            peopleDetected++;\n        }\n    }\n}\n\nlet arrayString = \"\"\nfor (let y = 0; y < cameraArray.length; y++) {\n    for (let x = 0; x < cameraArray.length; x++) {\n        arrayString += cameraArrayMarked[y][x] + \",\";\n    }\n    arrayString += \"\\n\";\n}\n\n//node.warn(arrayString);\nmsg.arrayString = arrayString;\nmsg.peopleDetected = peopleDetected;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1260,
        "y": 640,
        "wires": [
            [
                "eae1d6f576cd6e8c",
                "99f3908ecb4413c2",
                "dd6b55fc1321e33b"
            ]
        ]
    },
    {
        "id": "99f3908ecb4413c2",
        "type": "debug",
        "z": "182d3223c1260b67",
        "name": "Debug marked array string",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "arrayString",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1280,
        "y": 680,
        "wires": []
    },
    {
        "id": "55ffaf1cd9128f22",
        "type": "sqlite",
        "z": "182d3223c1260b67",
        "mydb": "367ecc55a7054ddf",
        "sqlquery": "msg.topic",
        "sql": "UPDATE Cameras SET numDetected = msg.peopleDetected WHERE cameraID = flow.get(\"numDetected\");",
        "name": "Update camera numDetected",
        "x": 1750,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "dd6b55fc1321e33b",
        "type": "function",
        "z": "182d3223c1260b67",
        "name": "Create query",
        "func": "msg.topic = \"UPDATE Cameras SET numDetected = \" + msg.peopleDetected + \" WHERE cameraID = \" + flow.get(\"cameraID\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1490,
        "y": 640,
        "wires": [
            [
                "55ffaf1cd9128f22"
            ]
        ]
    },
    {
        "id": "ad18168e8834586c",
        "type": "debug",
        "z": "182d3223c1260b67",
        "name": "Debug array true",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "arrayTrueString",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 800,
        "wires": []
    },
    {
        "id": "c43f89f7600d2f1e",
        "type": "sqlite",
        "z": "4515619534d06bc2",
        "mydb": "367ecc55a7054ddf",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "iot DB",
        "x": 1270,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "7b1672d3b88d5d2a",
        "type": "function",
        "z": "4515619534d06bc2",
        "name": "Create Update Query",
        "func": "if (msg.topic === \"\")\n{\n    msg.topic = 0;\n}\nvar statement = \"UPDATE RFIDList SET roomID = \" + msg.topic + \" WHERE RFID = \\\"\" + msg.payload + \"\\\"\";\nvar newmsg = {topic: statement};\nreturn newmsg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 180,
        "wires": [
            [
                "fdb4dd410c1c0d4a",
                "c43f89f7600d2f1e"
            ]
        ]
    },
    {
        "id": "fdb4dd410c1c0d4a",
        "type": "debug",
        "z": "4515619534d06bc2",
        "name": "debug 2",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 260,
        "wires": []
    },
    {
        "id": "3355ca38c8eecd4f",
        "type": "inject",
        "z": "4515619534d06bc2",
        "name": "RFID Scanner",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "v": "roomnum",
                "vt": "flow"
            },
            {
                "p": "timestamp",
                "v": "",
                "vt": "date"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "rfid",
        "payloadType": "flow",
        "x": 510,
        "y": 180,
        "wires": [
            [
                "7b1672d3b88d5d2a",
                "2bbf939cd0e0b655"
            ]
        ]
    },
    {
        "id": "5aa27163bb4715e0",
        "type": "inject",
        "z": "4515619534d06bc2",
        "name": "Room 1",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "str",
        "x": 490,
        "y": 260,
        "wires": [
            [
                "53a97c522c1ff629"
            ]
        ]
    },
    {
        "id": "9c16ddaf4a148b49",
        "type": "inject",
        "z": "4515619534d06bc2",
        "name": "Room 2",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "2",
        "payloadType": "str",
        "x": 490,
        "y": 320,
        "wires": [
            [
                "53a97c522c1ff629"
            ]
        ]
    },
    {
        "id": "2f18a790f421174c",
        "type": "inject",
        "z": "4515619534d06bc2",
        "name": "Room 3",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "3",
        "payloadType": "str",
        "x": 490,
        "y": 380,
        "wires": [
            [
                "53a97c522c1ff629"
            ]
        ]
    },
    {
        "id": "10fc60fa3fa9dda7",
        "type": "inject",
        "z": "4515619534d06bc2",
        "name": "c65e3be8-849c-46f0-9906-d7df37a4d9fc",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "c65e3be8-849c-46f0-9906-d7df37a4d9fc",
        "payloadType": "str",
        "x": 600,
        "y": 580,
        "wires": [
            [
                "4c768ad9ebf6ed23"
            ]
        ]
    },
    {
        "id": "fe1a488aad1f6f43",
        "type": "inject",
        "z": "4515619534d06bc2",
        "name": "51b304c6-ceb2-404b-b576-5bec8cc4008a",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "51b304c6-ceb2-404b-b576-5bec8cc4008a",
        "payloadType": "str",
        "x": 600,
        "y": 640,
        "wires": [
            [
                "4c768ad9ebf6ed23"
            ]
        ]
    },
    {
        "id": "72f2b293aea614c4",
        "type": "inject",
        "z": "4515619534d06bc2",
        "name": "4d6a4996-0373-4539-b05c-7c93a056a6a5",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "4d6a4996-0373-4539-b05c-7c93a056a6a5",
        "payloadType": "str",
        "x": 600,
        "y": 700,
        "wires": [
            [
                "4c768ad9ebf6ed23"
            ]
        ]
    },
    {
        "id": "4c768ad9ebf6ed23",
        "type": "change",
        "z": "4515619534d06bc2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "rfid",
                "pt": "flow",
                "to": "payload",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 890,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "48a97aa0dace137e",
        "type": "inject",
        "z": "4515619534d06bc2",
        "name": "No Room",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 480,
        "y": 440,
        "wires": [
            [
                "53a97c522c1ff629"
            ]
        ]
    },
    {
        "id": "fe6f3bbc3644190b",
        "type": "function",
        "z": "4515619534d06bc2",
        "name": "Insert RFID History Data",
        "func": "if (msg.topic === \"\") \n{\n    var prevroomnum = flow.get(\"prevroomnum\");\n    var statement = \"INSERT INTO RFIDHistory(RFID, Timestamp, RoomID, EventType) VALUES (\\\"\" + msg.payload + \"\\\", \\\"\" + msg.timestampformat + \"\\\", \" + prevroomnum + \", 0)\";\n}\nelse\n{\n    var statement = \"INSERT INTO RFIDHistory(RFID, Timestamp, RoomID, EventType) VALUES (\\\"\" + msg.payload + \"\\\", \\\"\" + msg.timestampformat + \"\\\", \" + msg.topic + \", 1)\";\n}\nvar newmsg = { topic: statement };\nreturn newmsg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 120,
        "wires": [
            [
                "658aa10efb6a88c1",
                "c43f89f7600d2f1e"
            ]
        ]
    },
    {
        "id": "658aa10efb6a88c1",
        "type": "debug",
        "z": "4515619534d06bc2",
        "name": "debug 10",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "topic",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1240,
        "y": 60,
        "wires": []
    },
    {
        "id": "53a97c522c1ff629",
        "type": "function",
        "z": "4515619534d06bc2",
        "name": "set flow.roomnum",
        "func": "if (msg.payload === \"\")\n{\n    flow.set(\"prevroomnum\", flow.get(\"roomnum\"));\n}\nflow.set(\"roomnum\", msg.payload);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "2bbf939cd0e0b655",
        "type": "moment",
        "z": "4515619534d06bc2",
        "name": "",
        "topic": "",
        "input": "timestamp",
        "inputType": "msg",
        "inTz": "Australia/Brisbane",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "",
        "locale": "en-US",
        "output": "timestampformat",
        "outputType": "msg",
        "outTz": "Australia/Brisbane",
        "x": 780,
        "y": 120,
        "wires": [
            [
                "fe6f3bbc3644190b",
                "01edf049c1fcaf34"
            ]
        ]
    },
    {
        "id": "01edf049c1fcaf34",
        "type": "debug",
        "z": "4515619534d06bc2",
        "name": "debug 11",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "timestampformat",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1000,
        "y": 60,
        "wires": []
    },
    {
        "id": "e2a25e403d3b6d75",
        "type": "sqlite",
        "z": "88cb21596959a18c",
        "mydb": "367ecc55a7054ddf",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "iot DB",
        "x": 1450,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "4959f7447da67718",
        "type": "function",
        "z": "88cb21596959a18c",
        "name": "Create Update Query",
        "func": "if (msg.topic === \"\")\n{\n    msg.topic = 0;\n}\nvar statement = \"UPDATE Machines SET Status = \" + msg.payload + \" WHERE MachineID = \\\"\" + msg.topic + \"\\\"\";\nvar newmsg = {topic: statement};\nreturn newmsg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 220,
        "wires": [
            [
                "0524eaeb7660bc6e",
                "e2a25e403d3b6d75"
            ]
        ]
    },
    {
        "id": "0524eaeb7660bc6e",
        "type": "debug",
        "z": "88cb21596959a18c",
        "name": "debug 7",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 320,
        "wires": []
    },
    {
        "id": "fe96a0ab883f716d",
        "type": "inject",
        "z": "88cb21596959a18c",
        "name": "Energy Monitor",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "v": "machineid",
                "vt": "flow"
            },
            {
                "p": "timestamp",
                "v": "",
                "vt": "date"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "machineenergy",
        "payloadType": "flow",
        "x": 340,
        "y": 220,
        "wires": [
            [
                "80e11616f71ae045",
                "2a91b90e752e7606"
            ]
        ]
    },
    {
        "id": "f3b4ce8e8d116cd8",
        "type": "inject",
        "z": "88cb21596959a18c",
        "name": "0 Watts",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 310,
        "y": 300,
        "wires": [
            [
                "fc15fbb575a32525"
            ]
        ]
    },
    {
        "id": "fc1fef20c115eb0c",
        "type": "inject",
        "z": "88cb21596959a18c",
        "name": "100 Watts",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "100",
        "payloadType": "num",
        "x": 300,
        "y": 360,
        "wires": [
            [
                "fc15fbb575a32525"
            ]
        ]
    },
    {
        "id": "42d908f5e531f3e7",
        "type": "inject",
        "z": "88cb21596959a18c",
        "name": "200 Watts",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "200",
        "payloadType": "num",
        "x": 300,
        "y": 420,
        "wires": [
            [
                "fc15fbb575a32525"
            ]
        ]
    },
    {
        "id": "fc15fbb575a32525",
        "type": "change",
        "z": "88cb21596959a18c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "machineenergy",
                "pt": "flow",
                "to": "payload",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 530,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "c41f742b374b36f7",
        "type": "inject",
        "z": "88cb21596959a18c",
        "name": "Machine 1",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "str",
        "x": 320,
        "y": 620,
        "wires": [
            [
                "81b35c989e8a4c8b"
            ]
        ]
    },
    {
        "id": "a60a44b55023e157",
        "type": "inject",
        "z": "88cb21596959a18c",
        "name": "Machine 2",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "2",
        "payloadType": "str",
        "x": 320,
        "y": 680,
        "wires": [
            [
                "81b35c989e8a4c8b"
            ]
        ]
    },
    {
        "id": "01a0a96835cace4d",
        "type": "inject",
        "z": "88cb21596959a18c",
        "name": "Machine 3",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "3",
        "payloadType": "str",
        "x": 320,
        "y": 740,
        "wires": [
            [
                "81b35c989e8a4c8b"
            ]
        ]
    },
    {
        "id": "81b35c989e8a4c8b",
        "type": "change",
        "z": "88cb21596959a18c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "machineid",
                "pt": "flow",
                "to": "payload",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 730,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "1841455f9635e011",
        "type": "inject",
        "z": "88cb21596959a18c",
        "name": "300 Watts",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "300",
        "payloadType": "num",
        "x": 300,
        "y": 480,
        "wires": [
            [
                "fc15fbb575a32525"
            ]
        ]
    },
    {
        "id": "80e11616f71ae045",
        "type": "debug",
        "z": "88cb21596959a18c",
        "name": "debug 8",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 540,
        "y": 280,
        "wires": []
    },
    {
        "id": "2a91b90e752e7606",
        "type": "function",
        "z": "88cb21596959a18c",
        "name": "Parse Energy Rating",
        "func": "var energy = msg.payload;\nvar status = 0;\nif (energy >= 150)\n{\n    status = 1\n}\nvar newmsg = { topic: msg.topic, payload: status };\nreturn newmsg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 220,
        "wires": [
            [
                "eda5c3320ca96d3f",
                "4959f7447da67718",
                "891248976fe35af6"
            ]
        ]
    },
    {
        "id": "eda5c3320ca96d3f",
        "type": "debug",
        "z": "88cb21596959a18c",
        "name": "debug 9",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 280,
        "wires": []
    },
    {
        "id": "891248976fe35af6",
        "type": "moment",
        "z": "88cb21596959a18c",
        "name": "",
        "topic": "",
        "input": "timestamp",
        "inputType": "msg",
        "inTz": "Australia/Brisbane",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "",
        "locale": "en-US",
        "output": "timestampformat",
        "outputType": "msg",
        "outTz": "Australia/Brisbane",
        "x": 880,
        "y": 120,
        "wires": [
            [
                "32be23b705b76386"
            ]
        ]
    },
    {
        "id": "32be23b705b76386",
        "type": "function",
        "z": "88cb21596959a18c",
        "name": "Insert Machine History Data",
        "func": "var statement = \"INSERT INTO MachinesHistory(MachineID, Timestamp, State) VALUES (\" + msg.topic + \", \\\"\" + msg.timestampformat + \"\\\", \" + msg.payload + \")\";\nvar newmsg = { topic: statement };\nreturn newmsg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1220,
        "y": 120,
        "wires": [
            [
                "e2a25e403d3b6d75"
            ]
        ]
    }
]